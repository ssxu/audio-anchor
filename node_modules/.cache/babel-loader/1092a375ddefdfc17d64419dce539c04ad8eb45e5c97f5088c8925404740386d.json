{"ast":null,"code":"// 移除 config 导入，因为我们直接使用代理\n// import config from '../config/config';\n\n// 简化 getApiUrl 函数\nconst getApiUrl = () => {\n  // 在开发环境中使用代理\n  if (process.env.NODE_ENV === 'development') {\n    return '/api';\n  }\n\n  // 在生产环境中使用环境变量中配置的地址\n  return '/api';\n};\nexport const callTranscriptionAPI = async file => {\n  const formData = new FormData();\n  formData.append('audio', file);\n  try {\n    const response = await fetch('/api/api', {\n      // 直接使用 /api 前缀\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error('转录请求失败');\n    }\n    const result = await response.json();\n    if (result.code !== 0) {\n      throw new Error(result.msg || '转录请求失败');\n    }\n    return result;\n  } catch (error) {\n    console.error('转录出错:', error);\n    throw error;\n  }\n};\n\n// 辅助函数：将时间字符串转换为秒数\nexport const timeStringToSeconds = timeStr => {\n  const [hours, minutes, seconds] = timeStr.split(':').map(Number);\n  const [secs, ms] = seconds.toString().split(',').map(Number);\n  return hours * 3600 + minutes * 60 + secs + ms / 1000;\n};\nexport const fetchTranscription = async fileId => {\n  try {\n    const response = await fetch(`/api/transcription/${fileId}`); // 直接使用 /api 前缀\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching transcription:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["getApiUrl","process","env","NODE_ENV","callTranscriptionAPI","file","formData","FormData","append","response","fetch","method","body","ok","Error","result","json","code","msg","error","console","timeStringToSeconds","timeStr","hours","minutes","seconds","split","map","Number","secs","ms","toString","fetchTranscription","fileId"],"sources":["/Volumes/disk/code/learn-to-text/src/services/transcriptionService.js"],"sourcesContent":["// 移除 config 导入，因为我们直接使用代理\n// import config from '../config/config';\n\n// 简化 getApiUrl 函数\nconst getApiUrl = () => {\n  // 在开发环境中使用代理\n  if (process.env.NODE_ENV === 'development') {\n    return '/api';\n  }\n  \n  // 在生产环境中使用环境变量中配置的地址\n  return '/api';\n};\n\nexport const callTranscriptionAPI = async (file) => {\n  const formData = new FormData();\n  formData.append('audio', file);\n\n  try {\n    const response = await fetch('/api/api', {  // 直接使用 /api 前缀\n      method: 'POST',\n      body: formData,\n    });\n\n    if (!response.ok) {\n      throw new Error('转录请求失败');\n    }\n\n    const result = await response.json();\n    if (result.code !== 0) {\n      throw new Error(result.msg || '转录请求失败');\n    }\n\n    return result;\n  } catch (error) {\n    console.error('转录出错:', error);\n    throw error;\n  }\n};\n\n// 辅助函数：将时间字符串转换为秒数\nexport const timeStringToSeconds = (timeStr) => {\n  const [hours, minutes, seconds] = timeStr.split(':').map(Number);\n  const [secs, ms] = seconds.toString().split(',').map(Number);\n  return hours * 3600 + minutes * 60 + secs + ms / 1000;\n};\n\nexport const fetchTranscription = async (fileId) => {\n  try {\n    const response = await fetch(`/api/transcription/${fileId}`);  // 直接使用 /api 前缀\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching transcription:', error);\n    throw error;\n  }\n};"],"mappings":"AAAA;AACA;;AAEA;AACA,MAAMA,SAAS,GAAGA,CAAA,KAAM;EACtB;EACA,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;IAC1C,OAAO,MAAM;EACf;;EAEA;EACA,OAAO,MAAM;AACf,CAAC;AAED,OAAO,MAAMC,oBAAoB,GAAG,MAAOC,IAAI,IAAK;EAClD,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,IAAI,CAAC;EAE9B,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,UAAU,EAAE;MAAG;MAC1CC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEN;IACR,CAAC,CAAC;IAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,QAAQ,CAAC;IAC3B;IAEA,MAAMC,MAAM,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IACpC,IAAID,MAAM,CAACE,IAAI,KAAK,CAAC,EAAE;MACrB,MAAM,IAAIH,KAAK,CAACC,MAAM,CAACG,GAAG,IAAI,QAAQ,CAAC;IACzC;IAEA,OAAOH,MAAM;EACf,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;IAC7B,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,mBAAmB,GAAIC,OAAO,IAAK;EAC9C,MAAM,CAACC,KAAK,EAAEC,OAAO,EAAEC,OAAO,CAAC,GAAGH,OAAO,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;EAChE,MAAM,CAACC,IAAI,EAAEC,EAAE,CAAC,GAAGL,OAAO,CAACM,QAAQ,CAAC,CAAC,CAACL,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;EAC5D,OAAOL,KAAK,GAAG,IAAI,GAAGC,OAAO,GAAG,EAAE,GAAGK,IAAI,GAAGC,EAAE,GAAG,IAAI;AACvD,CAAC;AAED,OAAO,MAAME,kBAAkB,GAAG,MAAOC,MAAM,IAAK;EAClD,IAAI;IACF,MAAMxB,QAAQ,GAAG,MAAMC,KAAK,CAAC,sBAAsBuB,MAAM,EAAE,CAAC,CAAC,CAAE;IAC/D,IAAI,CAACxB,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,OAAO,MAAML,QAAQ,CAACO,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}